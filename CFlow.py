import sql as sql
import random
import datetime
import time



def calcTime(time): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –±–æ—Ç–∞


    time = str(time)[:19]
    print(time)
    a = (datetime.datetime.strptime(str(time)[:10], '%Y-%m-%d') -
             datetime.datetime.strptime(str(datetime.datetime.now())[:10], '%Y-%m-%d'))
    b = (datetime.datetime.strptime(str(time)[11:], '%H:%M:%S') -
             datetime.datetime.strptime(str(datetime.datetime.now())[11:-7], '%H:%M:%S'))
    s = a.total_seconds() + b.total_seconds()
    return list(map(int, [s // 86400,(s % 86400) //  (60*60), (s % 86400) //  60 % 60, (s % 86400) % 60]))


def checkRepeat(wordWithTime):# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –∏–ª–∏ –Ω–µ—Ç
    if wordWithTime[1] < datetime.datetime.now():
        return True
    else:
        return False

# –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–µ—Å—å –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ —Å–ª–æ–≤–∞–º
class Flow:
    def __init__(self, userid):# –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._userid = userid

        # —ç—Ç–æ —Å–ø–∏—Å–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Å–ª–æ–≤–∞
        self.NW = sql.takelist('NW', self._userid)  ##0 - —ç—Ç–∞ —Ü–∏—Ñ—Ä–∞ —ç—Ç–æ –∫–æ–¥ –≥—Ä—É–ø–ø—ã  ‚ñ™NW - —ç—Ç–æ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
        self.AM = sql.takelist('AM', self._userid)  ##1      AM - —ç—Ç–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ   üü©
        self.MW = sql.takelist('MW', self._userid)  ##2        MW -—ç—Ç–æ ‚¨ú –∑–∞—É—á–∏–≤–∞–µ–º—ã–µ
        self.RW = sorted(sql.takelist('RW', self._userid), key=lambda x: x[1])  ##3  RW - —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µüî≥
        # –æ–Ω–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å—é–¥–∞ —Å—Ä–∞–∑—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.addtimes()

        self.statToday = sorted(sql.takeStat(self._userid), reverse=True, key=lambda x: x[0])[0] # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.statAll = sql.takeStat(self._userid) # —Ç–æ–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.mode = 'm'
        self.decksize = sql.takeSize(userid) # —Ä–∞–∑–º–µ—Ä –∫–æ–ª–æ–¥—ã
        self.deck = list() # —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞
        self.makeflow()

    def getStat(self, mode): # —Ñ—É–Ω–∫—Ü–∏—è, —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        alltimestat = [x[1:] for x in self.statAll]
        if mode == 'today':
            return "–ó–∞ –°–µ–≥–æ–¥–Ω—è:\n\n–í—ã—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö: {}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: {}\n–£–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ: {}\n–û—Å—Ç–∞–ª–æ—Å—å: {}\n".format(
                self.statToday[1], self.statToday[2], self.statToday[3], 1000 - sum([sum(x) for x in zip(*alltimestat)]))
        if mode == 'alltime':
            return "–ó–∞ –í—Å–µ –≤—Ä–µ–º—è:\n\n–í—ã—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö: {}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: {}\n–£–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ: {}\n–û—Å—Ç–∞–ª–æ—Å—å: {}\n".format(
                [sum(x) for x in zip(*alltimestat)][0], [sum(x) for x in zip(*alltimestat)][1],
                [sum(x) for x in zip(*alltimestat)][2], 1000 - sum([sum(x) for x in zip(*alltimestat)]))


    @staticmethod
    def setRepTime(repeat):  # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω—è —Å–ª–æ–≤–∞
        if repeat == 1:
            return datetime.datetime.now() + datetime.timedelta(0, 1200)
        if repeat == 2:
            return datetime.datetime.now() + datetime.timedelta(0, 28800)
        if repeat == 3:
            return datetime.datetime.now() + datetime.timedelta(0, 86400)
        if repeat == 4:
            return datetime.datetime.now() + datetime.timedelta(0, 259200)
        if repeat == 5:
            return datetime.datetime.now() + datetime.timedelta(0, 345600)
        if repeat == 6:
            return datetime.datetime.now() + datetime.timedelta(0, 604800)
        return 'NULL'

    def addtimes(self): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –∫ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É –≤ —Ä–µ–ø–∏—Ç
        times = sql.taketimes(self._userid)

        for i in range(0, len(self.RW)):
            for j in times:
                if j[0] == self.RW[i][0]:
                    self.RW[i] = [self.RW[i], j[1], j[2]]

    def RWlen(self): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–¥–Ω—ã—Ö –∫ –≤—ã–¥–∞—á–µ —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        count = 0

        for i in range(0, len(self.RW)):
            if checkRepeat(self.RW[i]):
                count += 1
        return count

    def remembered(self): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏  –∑–Ω–∞—é

        if self.deck[0] == 0: # –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–æ–≤–æ–µ, —Ç–µ NW, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∑–∞—É—á–∏–≤–∞–µ–º–æ–µ
            sql.changelist(self.NW[0][0], 'AM', self._userid)
            self.AM.append(self.NW.pop(0))
            self.statToday[3] += 1

        elif self.deck[0] == 1: #–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ, —Ç–µ AM, —Ç–æ –∫–∏–¥–∞–µ—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            self.AM.append(self.AM.pop(0))

        elif self.deck[0] == 2: #–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –∑–∞—É—á–∏–≤–∞–µ–º–æ–µ —Ç–æ –∫–∏–¥–∞–µ—Ç –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            sql.changelist(self.MW[0][0], 'RW', self._userid, dateT=datetime.datetime.now())
            self.RW.append([list(self.MW.pop(0)), datetime.datetime.now(), 0])
            self.statToday[1] += 1

        elif self.deck[0] == 3:# –Ω—É —É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–≤–∞ —Å–ª—É—á–∞—è, –ª–∏–±–æ –≤—ã—É—á–∏–ª–æ—Å—å —Å–ª–æ–≤–æ, –ª–∏–±–æ –Ω–µ—Ç, –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç, –ø–æ–ø–∞–¥–µ—Ç –ª–∏ –æ–Ω–æ –≤
            if self.RW[0][2] >= 6: # —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ—Ç
                self.RW[0][2] += 1
                sql.changelist(self.RW[0][0], 'AM', self._userid)
                self.AM.append(self.RW.pop(0)[0])
                self.statToday[3] += 1
            else:
                self.RW[0][2] += 1
                self.RW[0][1] = self.setRepTime(self.RW[0][2])
                if self.RW[0][0] != 0:
                    sql.changelist(self.RW[0][0][0], 'RW', self._userid, self.RW[0][2], self.RW[0][1])
                self.RW.append(self.RW.pop(0))
                self.statToday[2] += 1

        return self.nextword()

    @property
    def forgot(self):# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏  –Ω–µ –∑–Ω–∞—é
        if self.deck[0] == 0: # —Ç—É—Ç –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –≤—Å–µ –ª–æ–≥–∏—á–Ω–æ, —Ç–µ –∂–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ —Ö–µ–ª–ø(–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)
            sql.changelist(self.NW[0][0], 'MW', self._userid)
            self.MW.append(self.NW.pop(0))

        elif self.deck[0] == 1:
            sql.changelist(self.AM[0][0], 'MW', self._userid)
            self.MW.append(self.AM.pop(0))

        elif self.deck[0] == 2:
            self.MW = ([self.MW[0]] + random.sample(self.MW[1:], len(self.MW[1:])))[::-1]

        elif self.deck[0] == 3:
            self.RW.append(self.RW.pop(0))
        sql.setSize(self._userid, self.decksize)
        sql.setStat(self._userid, self.statToday[1], self.statToday[2], self.statToday[3])
        return self.nextword()

    def update(self):# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, —Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
        for i in self.NW:
            sql.changelist(i[0], 'NW', self._userid)

        for i in self.AM:
            sql.changelist(i[0], 'AM', self._userid)

        for i in self.MW:
            sql.changelist(i[0], 'MW', self._userid)

        for i in self.RW:
            if self.RW[0][0] != 0:
                sql.changelist(i[0][0], 'RW', self._userid, self.RW[0][2], self.RW[0][1])
        sql.setSize(self._userid, self.decksize)
        sql.setStat(self._userid, self.statToday[1], self.statToday[2], self.statToday[3])

    def nextword(self): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–Ω–∞—é –∏ –Ω–µ –∑–Ω–∞—é
        self.makeflow()
        self.RW = sorted(self.RW, key=lambda x: x[1])
        if not ((self.deck[0] == 3 and self.RWlen() == 0) or self.deck[0] == 1 or self.deck == [2,0]):
            self.deck.pop(0)
        time.sleep(0.2)
        # self.update()
        return self.takeword

    def makeflow(self): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–ª–æ–≤, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–æ–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.mode == 'm':
            self.deck = list()

            if (self.decksize - self.statToday[1]) > 0:
                for j in range(0, len(self.MW)):
                    self.deck.append(2)

                for j in range(0, self.decksize - self.statToday[1] - len(self.MW)+1):
                    self.deck.append(0)

            else:
                self.deck = [4 for i in range(0, 2)]

        if self.mode == 'r':
            if not self.RWlen():
                self.deck = [4 for i in range(0, 2)]

            else:
                self.deck = [3 for i in range(0, self.RWlen()+1)]

        if self.mode == 'l':
            self.deck = [1]


        if(len(self.deck)>2):
            random.shuffle(self.deck)


    def repeatIsEmpty(self):# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Å—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–∏—Ç –∏–ª–∏ –Ω–µ—Ç
        if sorted(self.RW, key=lambda x: x[1])[0][1] < datetime.datetime.now():
            return False

        else:
            return True

    @property
    def takeword(self):# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä—Ö–Ω–µ–µ –≤ –∫–æ–ª–æ–¥–µ, —Ç–∏–ø–æ, –µ—Å–ª–∏ –≤ deck[0] –ª–µ–∂–∏—Ç 0, —Ç–æ –≤—ã–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ 2, —Ç–æ —Å–ª–æ–≤–æ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è

        if self.deck[0] == 0:
            return [self.NW[0]] + ['‚ñ™New word'] + ['']

        elif self.deck[0] == 1:
            if len(self.AM) == 0:
                return [(0, "–ø—É—Å—Ç–æ", " ;(")] + [''] + ['']
            else:
                return [self.AM[0]] + ['üü©Already known'] + ['']

        elif self.deck[0] == 2:
            return [self.MW[0]] + ['‚¨úMemorization word'] + ['']

        elif self.deck[0] == 3:

            if not(self.repeatIsEmpty()):
                print(checkRepeat(self.RW[0]),self.RW[0])
                if checkRepeat(self.RW[0]):

                    return [self.RW[0][0]] + ['üî≥Repeat word'] + ['r:'.format(self.RW[0][2])]
                else:
                    return [(0, "–ø—É—Å—Ç–æ", " ;(")] + [''] + ['']

        elif self.deck[0] == 4:
            if self.mode == 'r':
                try:
                    nearTime = calcTime(sorted(self.RW,key=lambda x: x[1])[0][1])

                    if not(nearTime[0]):
                        return [(0, "–ø—É—Å—Ç–æ", " ;(")] + [
                            '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {}:{}:{}'.format(nearTime[1], nearTime[2], nearTime[3])] + ['']
                    else:
                        return [(0, "–ø—É—Å—Ç–æ", " ;(")] + [
                            '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {}d {}:{}:{}'.format(nearTime[0], nearTime[1], nearTime[2], nearTime[3])] + [
                            '']
                except:
                    return [(0, "–ø—É—Å—Ç–æ", " ;(")] + [''] + ['']

            if self.mode == 'm':
                return [(0, "–ø—É—Å—Ç–æ", " ;(")] + [
                    '–í—ã—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {} —Å–ª–æ–≤'.format(self.statToday[1])] + ['']


#228